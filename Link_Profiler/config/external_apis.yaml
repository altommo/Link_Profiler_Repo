# Link_Profiler/config/external_apis.yaml

# --- Backlink APIs ---
backlink_api:
  # Google Search Console API (requires OAuth setup and verified property)
  gsc_api:
    enabled: false # Set to true if you have GSC setup and want to use it
    credentials_file: "credentials.json" # Path to your GSC credentials.json
    token_file: "token.json" # Path to your GSC token.json

  # OpenLinkProfiler API (free with usage limits)
  openlinkprofiler_api:
    enabled: true # Enable this for free backlink data
    base_url: "http://www.openlinkprofiler.org/api/index.php"

  # Real Backlink API (e.g., Ahrefs, Moz, SEMrush - PAID)
  real_api:
    enabled: false # Keep this false to avoid costs
    api_key: "YOUR_PAID_BACKLINK_API_KEY"
    base_url: "https://api.ahrefs.com/v2" # Example for Ahrefs

# --- Domain APIs ---
domain_api:
  # AbstractAPI (PAID - often has a free tier, but can incur costs)
  abstract_api:
    enabled: false # Keep this false to avoid costs
    api_key: "YOUR_ABSTRACT_API_KEY"
    base_url: "https://domain-validation.abstractapi.com/v1/"
    whois_base_url: "https://whois.abstractapi.com/v1/"

  # WHOIS-JSON.com API (free with usage limits, optional API key for higher limits)
  whois_json_api:
    enabled: true # Enable this for free WHOIS data
    api_key: "" # Leave empty for free tier, or add if you have one
    base_url: "https://www.whois-json.com/api/v1/whois"

  # SecurityTrails API (PAID)
  securitytrails:
    enabled: false # Keep this false to avoid costs
    api_key: "YOUR_SECURITYTRAILS_API_KEY"
    base_url: "https://api.securitytrails.com/v1"

  # BuiltWith API (PAID)
  builtwith:
    enabled: false # Keep this false to avoid costs
    api_key: "YOUR_BUILTWITH_API_KEY"
    base_url: "https://api.builtwith.com/v19/api.json"

  # Hunter.io API (PAID - often has a free tier, but can incur costs)
  hunter_io:
    enabled: false # Keep this false to avoid costs
    api_key: "YOUR_HUNTER_IO_API_KEY"
    base_url: "https://api.hunter.io/v2"

  # Domain Service specific settings (for direct DNS/IP lookups)
  domain_service:
    allow_live: true # Set to true to allow direct DNS/IP lookups (free)
  
  # DNS over HTTPS (DOH) APIs (free public services)
  dns_over_https_api:
    enabled: true # Enable for more reliable DNS lookups
    cloudflare_url: "https://cloudflare-dns.com/dns-query"
    google_url: "https://dns.google/resolve"

  # SEO Metrics API (e.g., Open PageRank - often free, but check terms)
  seo_metrics_api:
    enabled: false # Enable if you want to use a free SEO metrics API (e.g., Open PageRank)
    api_key: "" # Add API key if required
    base_url: "https://openpagerank.com/api/v1.0/getPageRank"

  # IP Info API (e.g., ip-api.com - often free, but check terms)
  ip_info_api:
    enabled: true # Enable for free IP info lookups
    api_key: "" # Add API key if required (some free tiers don't need one)
    base_url: "http://ip-api.com/json"

# --- SERP APIs ---
serp_api:
  # Serpstack API (PAID - often has a free tier, but can incur costs)
  serpstack:
    enabled: false # Keep this false to avoid costs
    api_key: "YOUR_SERPSTACK_API_KEY"
    base_url: "http://api.serpstack.com/api/"

  # ValueSERP API (PAID - often has a free tier, but can incur costs)
  valueserp:
    enabled: false # Keep this false to avoid costs
    api_key: "YOUR_VALUESERP_API_KEY"
    base_url: "https://api.valueserp.com/search"

# --- Keyword APIs ---
keyword_api:
  # Real Keyword API (e.g., Ahrefs, SEMrush - PAID)
  real_api:
    enabled: false # Keep this false to avoid costs
    api_key: "YOUR_PAID_KEYWORD_API_KEY"
    base_url: "https://api.example.com/keyword" # Example

  # Real Keyword Metrics API (e.g., Ahrefs, SEMrush - PAID)
  metrics_api:
    enabled: false # Keep this false to avoid costs
    api_key: "YOUR_PAID_KEYWORD_METRICS_API_KEY"
    base_url: "https://api.example.com/keyword_metrics" # Example

  # Keyword Service specific settings
  keyword_service:
    allow_live: false # Set to false to force simulated/cached keyword data
    staleness_threshold_hours: 24 # How old cached data can be before attempting live fetch

# --- Web Scraping AI API (PAID - often has a free tier, but can incur costs) ---
webscraping_ai:
  enabled: false # Keep this false to avoid costs
  api_key: "YOUR_WEBSCRAPING_AI_API_KEY"
  base_url: "https://api.webscraping.ai/html"

# --- Wayback Machine API (FREE) ---
historical_data:
  wayback_machine_api:
    enabled: true # Enable this for free historical data
    base_url: "http://web.archive.org/cdx/search/cdx"

# --- Social Media APIs (PAID - often has free tiers, but can incur costs) ---
social_media_api:
  reddit:
    enabled: false # Keep this false to avoid costs
    client_id: "YOUR_REDDIT_CLIENT_ID"
    client_secret: "YOUR_REDDIT_CLIENT_SECRET"
    user_agent: "LinkProfilerApp/1.0"
  youtube:
    enabled: false # Keep this false to avoid costs
    api_key: "YOUR_YOUTUBE_API_KEY"
  news_api:
    enabled: false # Keep this false to avoid costs
    api_key: "YOUR_NEWS_API_KEY"

# --- AI Service (OpenRouter - can be free for some models, but check usage) ---
# It's recommended to disable live AI calls for cost control during initial aggregation.
# The AI service will then use simulated/cached results.
ai:
  enabled: true # Keep enabled to use simulated AI features
  openrouter_api_key: "" # Leave empty to avoid real API calls
  models:
    content_scoring: "google/gemma-7b-it" # Example free model on OpenRouter
    content_classification: "google/gemma-7b-it"
    content_gap_analysis: "google/gemma-7b-it"
    topic_clustering: "google/gemma-7b-it"
    keyword_research: "google/gemma-7b-it"
    technical_seo_analysis: "google/gemma-7b-it"
    competitor_analysis: "google/gemma-7b-it"
    content_generation: "google/gemma-7b-it"
    domain_value_analysis: "google/gemma-7b-it"
    content_nlp_analysis: "google/gemma-7b-it"
    video_frame_analysis: "google/gemma-7b-it"
    content_quality_assessment: "google/gemma-7b-it"
  ai_service:
    allow_live: false # Set to false to force simulated/cached AI results
    staleness_threshold_hours: 24 # How old cached data can be before attempting live fetch
