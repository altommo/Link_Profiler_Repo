#!/usr/bin/env python3
"""
Mission Control WebSocket Fix Script
Fixes common issues with Mission Control WebSocket initialization

Run this script from the Link_Profiler directory:
python fix_mission_control.py
"""

import sys
import os
import asyncio
import logging

# Add project root to path
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def create_env_file():
    """Create a .env file with basic required variables if it doesn't exist"""
    
    env_file_path = os.path.join(project_root, "Link_Profiler", ".env")
    env_example_path = os.path.join(project_root, "Link_Profiler", ".env.example")
    
    if os.path.exists(env_file_path):
        print(f"✓ .env file already exists at {env_file_path}")
        return
    
    print(f"Creating .env file at {env_file_path}")
    
    # Create basic .env content with minimal required variables
    env_content = """# Link Profiler Environment Variables
# Generated by fix_mission_control.py

# Database Configuration
LP_DATABASE_URL=postgresql://link_profiler:password@localhost:5432/link_profiler_db

# Redis Configuration  
LP_REDIS_URL=redis://localhost:6379/0

# Authentication - GENERATE A SECURE 32+ CHARACTER SECRET KEY
LP_AUTH_SECRET_KEY=your-secure-jwt-secret-key-here-minimum-32-characters-long-change-this

# Monitoring Authentication
LP_MONITOR_PASSWORD=your-secure-monitor-password-here-change-this

# Mission Control Configuration
LP_MISSION_CONTROL_ENABLED=true
LP_WEBSOCKET_ENABLED=true
LP_DASHBOARD_REFRESH_RATE=1000
"""
    
    try:
        with open(env_file_path, 'w') as f:
            f.write(env_content)
        print(f"✅ Created .env file at {env_file_path}")
        print("⚠️  IMPORTANT: Please edit the .env file and set proper values for:")
        print("   - LP_DATABASE_URL (your actual database connection)")
        print("   - LP_REDIS_URL (your actual Redis connection)")
        print("   - LP_AUTH_SECRET_KEY (generate a secure 32+ character key)")
        print("   - LP_MONITOR_PASSWORD (set a secure password)")
    except Exception as e:
        print(f"❌ Failed to create .env file: {e}")

async def check_and_fix_config():
    """Check and fix configuration issues"""
    
    print("\n" + "=" * 50)
    print("CHECKING AND FIXING CONFIGURATION")
    print("=" * 50)
    
    # Import after potentially creating .env file
    from Link_Profiler.config.config_loader import config_loader
    
    # Check critical configuration values
    critical_configs = {
        "mission_control.enabled": True,
        "mission_control.websocket_enabled": True,
        "mission_control.dashboard_refresh_rate": 1000,
        "mission_control.max_websocket_connections": 100,
        "mission_control.cache_ttl": 60,
        "redis.url": "redis://localhost:6379/0",
        "database.url": "postgresql://link_profiler:password@localhost:5432/link_profiler_db"
    }
    
    config_issues = []
    
    for key, expected_value in critical_configs.items():
        current_value = config_loader.get(key)
        if current_value is None:
            config_issues.append(f"Missing: {key}")
        elif key.endswith("enabled") and not isinstance(current_value, bool):
            config_issues.append(f"Wrong type: {key} should be boolean, got {type(current_value)}")
        elif key in ["redis.url", "database.url"] and "${" in str(current_value):
            config_issues.append(f"Unresolved variable: {key} = {current_value}")
    
    if config_issues:
        print("❌ Configuration issues found:")
        for issue in config_issues:
            print(f"   - {issue}")
    else:
        print("✅ All critical configuration values are present")
    
    return len(config_issues) == 0

async def check_dependencies():
    """Check if all required dependencies are available"""
    
    print("\n" + "=" * 50)
    print("CHECKING DEPENDENCIES")
    print("=" * 50)
    
    dependencies_ok = True
    
    # Check Redis
    try:
        import redis.asyncio as redis
        from Link_Profiler.config.config_loader import config_loader
        
        redis_url = config_loader.get("redis.url", "redis://localhost:6379/0")
        redis_client = redis.from_url(redis_url)
        await redis_client.ping()
        print("✅ Redis connection successful")
        await redis_client.close()
    except Exception as e:
        print(f"❌ Redis connection failed: {e}")
        dependencies_ok = False
    
    # Check Database
    try:
        from Link_Profiler.database.database import db
        db_status = db.ping()
        print(f"✅ Database connection: {db_status}")
    except Exception as e:
        print(f"❌ Database connection failed: {e}")
        dependencies_ok = False
    
    return dependencies_ok

async def test_mission_control_initialization():
    """Test Mission Control service initialization"""
    
    print("\n" + "=" * 50)
    print("TESTING MISSION CONTROL INITIALIZATION")
    print("=" * 50)
    
    try:
        # Import required modules
        import redis.asyncio as redis
        from Link_Profiler.config.config_loader import config_loader
        from Link_Profiler.database.database import db
        from Link_Profiler.services.mission_control_service import MissionControlService
        from Link_Profiler.services.dashboard_alert_service import DashboardAlertService
        from Link_Profiler.utils.api_quota_manager import APIQuotaManager
        from Link_Profiler.queue_system.smart_crawler_queue import SmartCrawlQueue
        from Link_Profiler.utils.distributed_circuit_breaker import DistributedResilienceManager
        
        # Create Redis client
        redis_url = config_loader.get("redis.url", "redis://localhost:6379/0")
        redis_client = redis.from_url(redis_url)
        
        # Create dependencies
        distributed_resilience_manager = DistributedResilienceManager(redis_client=redis_client)
        api_quota_manager = APIQuotaManager(config_loader._config_data, resilience_manager=distributed_resilience_manager, redis_client=redis_client)
        smart_crawl_queue = SmartCrawlQueue(redis_client=redis_client, config_loader=config_loader)
        dashboard_alert_service = DashboardAlertService(db=db, redis_client=redis_client, api_quota_manager=api_quota_manager)
        
        # Initialize Mission Control Service
        mission_control_service = MissionControlService(
            redis_client=redis_client,
            smart_crawl_queue=smart_crawl_queue,
            api_quota_manager=api_quota_manager,
            dashboard_alert_service=dashboard_alert_service
        )
        
        print("✅ Mission Control service initialized successfully")
        print(f"✓ WebSocket enabled: {mission_control_service.websocket_enabled}")
        print(f"✓ Max connections: {mission_control_service.max_websocket_connections}")
        print(f"✓ Refresh rate: {mission_control_service.dashboard_refresh_rate_seconds}s")
        
        # Test basic functionality
        try:
            # Test if we can get realtime updates (this will test all dependencies)
            updates = await mission_control_service.get_realtime_updates()
            print("✅ Mission Control can generate realtime updates")
        except Exception as e:
            print(f"⚠️  Mission Control initialized but cannot generate updates: {e}")
        
        await redis_client.close()
        return True
        
    except Exception as e:
        print(f"❌ Failed to initialize Mission Control: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """Main fix function"""
    
    print("MISSION CONTROL WEBSOCKET FIX SCRIPT")
    print("=" * 50)
    
    # Step 1: Create .env file if needed
    await create_env_file()
    
    # Step 2: Check configuration
    config_ok = await check_and_fix_config()
    
    # Step 3: Check dependencies
    deps_ok = await check_dependencies()
    
    # Step 4: Test Mission Control initialization
    if config_ok and deps_ok:
        mc_ok = await test_mission_control_initialization()
        
        if mc_ok:
            print("\n" + "=" * 50)
            print("✅ ALL CHECKS PASSED!")
            print("=" * 50)
            print("Mission Control should now work properly.")
            print("Try restarting your application and testing the WebSocket connection.")
        else:
            print("\n" + "=" * 50)
            print("❌ MISSION CONTROL INITIALIZATION FAILED")
            print("=" * 50)
    else:
        print("\n" + "=" * 50)
        print("❌ CONFIGURATION OR DEPENDENCY ISSUES FOUND")
        print("=" * 50)
        print("Please fix the configuration and dependency issues before proceeding.")

if __name__ == "__main__":
    asyncio.run(main())
