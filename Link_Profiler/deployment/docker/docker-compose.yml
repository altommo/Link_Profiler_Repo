version: '3.8'

services:
  # Redis for job queue
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # PostgreSQL database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: link_profiler_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Central coordinator and API
  coordinator:
    build:
      context: ../.. # Build from project root
      dockerfile: Link_Profiler/deployment/docker/Dockerfile.coordinator
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/link_profiler_db
      - DEAD_LETTER_QUEUE_NAME=dead_letter_queue # Pass dead letter queue name
      # Mission Control Dashboard Settings
      - LP_MISSION_CONTROL_ENABLED=true
      - LP_WEBSOCKET_ENABLED=true
      - LP_DASHBOARD_REFRESH_RATE=1000 # milliseconds
      - LP_MAX_WEBSOCKET_CONNECTIONS=100
      - LP_MISSION_CONTROL_CACHE_TTL=60 # seconds
      - LP_DASHBOARD_HISTORY_RETENTION=30 # days
      # LP_AUTH_SECRET_KEY is loaded from config.yaml by default, but can be overridden by env var
      # - LP_AUTH_SECRET_KEY=your_generated_auth_secret_key_here 
      # Optional API Keys (uncomment and set as needed)
      # - LP_ABSTRACT_API_KEY=your_abstract_api_key_here
      # - LP_USE_ABSTRACT_API=false
      # - LP_USE_OPENLINKPROFILER_API=false
      # - LP_USE_GSC_API=false
      # - LP_REAL_BACKLINK_API_KEY=your_real_backlink_api_key
      # - LP_USE_REAL_BACKLINK_API=false
      # - LP_REAL_SERP_API_KEY=your_real_serp_api_key
      # - LP_USE_REAL_SERP_API=false
      # - LP_USE_PLAYWRIGHT_SERP_CRAWLER=false
      # - LP_PLAYWRIGHT_HEADLESS=true
      # - LP_PLAYWRIGHT_BROWSER_TYPE=chromium
      # - LP_REAL_KEYWORD_API_KEY=your_real_keyword_api_key
      # - LP_USE_REAL_KEYWORD_API=false
      # - LP_USE_KEYWORD_SCRAPER=false
      # - LP_LIGHTHOUSE_PATH=lighthouse # Default path, change if Lighthouse is installed elsewhere
      # - LP_USE_CLICKHOUSE=false
      # - LP_CLICKHOUSE_HOST=clickhouse
      # - LP_CLICKHOUSE_PORT=9000
      # - LP_CLICKHOUSE_USER=default
      # - LP_CLICKHOUSE_PASSWORD=
      # New API Keys for Free Tier APIs (for APIQuotaManager)
      # - LP_SERPSTACK_API_KEY=your_serpstack_key
      # - LP_VALUESERP_API_KEY=your_valueserp_key
      # - LP_WEBSCRAPING_AI_API_KEY=your_webscraping_ai_key
      # - LP_HUNTER_IO_API_KEY=your_hunter_io_key
      # - LP_BUILTWITH_API_KEY=your_builtwith_key
      # - LP_CLEARBIT_API_KEY=your_clearbit_key
      # - LP_SECURITYTRAILS_API_KEY=your_securitytrails_key
      # Alerting
      # - LP_ALERT_SLACK_WEBHOOK=https://hooks.slack.com/your-webhook
      # - LP_ALERT_EMAIL_RECIPIENTS=admin@yourcompany.com
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Monitoring dashboard
  monitor:
    build:
      context: ../.. # Build from project root
      dockerfile: Link_Profiler/deployment/docker/Dockerfile.monitor
    ports:
      - "8001:8001"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/link_profiler_db # Monitor also needs DB access
      - MAIN_API_INTERNAL_URL=http://coordinator:8000 # How monitor reaches coordinator internally
    depends_on:
      - redis
      - postgres
    restart: unless-stopped

  # Satellite crawler instances
  satellite-1:
    build:
      context: ../..
      dockerfile: Link_Profiler/deployment/docker/Dockerfile.satellite
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/link_profiler_db
      - CRAWLER_ID=satellite-us-east-1
      - REGION=us-east-1
    depends_on:
      - redis
      - postgres
    restart: unless-stopped

  satellite-2:
    build:
      context: ../..
      dockerfile: Link_Profiler/deployment/docker/Dockerfile.satellite
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/link_profiler_db
      - CRAWLER_ID=satellite-us-west-1
      - REGION=us-west-1
    depends_on:
      - redis
      - postgres
    restart: unless-stopped

  satellite-3:
    build:
      context: ../..
      dockerfile: Link_Profiler/deployment/docker/Dockerfile.satellite
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/link_profiler_db
      - CRAWLER_ID=satellite-eu-west-1
      - REGION=eu-west-1
    depends_on:
      - redis
      - postgres
    restart: unless-stopped

  # New: Mission Control Dashboard Frontend
  mission-control:
    build:
      context: ./mission-control-dashboard # Build from the mission-control-dashboard directory
    ports:
      - "3000:3000" # React dev server port
    environment:
      # VITE_REACT_APP_API_URL should point to the Nginx service's external URL
      # VITE_REACT_APP_WS_URL should point to the Nginx service's external WS URL
      # In Docker Compose, this means pointing to the Nginx service name
      - VITE_REACT_APP_API_URL=http://nginx # Points to Nginx service
      - VITE_REACT_APP_WS_URL=ws://nginx/ws # Points to Nginx service for WebSockets
    depends_on:
      - coordinator # Depends on the FastAPI backend
      - nginx # Depends on Nginx for proxying
    volumes:
      - ./mission-control-dashboard:/app # Mount the dashboard source
      - /app/node_modules # Exclude node_modules from host mount to prevent issues
    command: npm run dev # Start the React development server

  # New: Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443" # If you plan to use HTTPS
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro # Mount the Nginx config
      # - ./ssl:/etc/nginx/ssl:ro # Uncomment for SSL certificates
    depends_on:
      - coordinator # Nginx needs the coordinator to be up
    restart: unless-stopped

volumes:
  redis_data:
  postgres_data:
