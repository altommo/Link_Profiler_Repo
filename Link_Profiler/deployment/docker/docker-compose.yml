version: '3.8'

services:
  # Redis for job queue
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # PostgreSQL database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: link_profiler_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Central coordinator and API
  coordinator:
    build:
      context: ../.. # Build from project root
      dockerfile: Link_Profiler/deployment/docker/Dockerfile.coordinator
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/link_profiler_db
      - DEAD_LETTER_QUEUE_NAME=dead_letter_queue # Pass dead letter queue name
      # Optional API Keys (uncomment and set as needed)
      # - ABSTRACT_API_KEY=your_abstract_api_key_here
      # - USE_ABSTRACT_API=false
      # - USE_OPENLINKPROFILER_API=false
      # - USE_GSC_API=false
      # - REAL_BACKLINK_API_KEY=your_real_backlink_api_key
      # - USE_REAL_BACKLINK_API=false
      # - REAL_SERP_API_KEY=your_real_serp_api_key
      # - USE_REAL_SERP_API=false
      # - USE_PLAYWRIGHT_SERP_CRAWLER=false
      # - PLAYWRIGHT_HEADLESS=true
      # - PLAYWRIGHT_BROWSER_TYPE=chromium
      # - REAL_KEYWORD_API_KEY=your_real_keyword_api_key
      # - USE_REAL_KEYWORD_API=false
      # - USE_KEYWORD_SCRAPER=false
      # - LIGHTHOUSE_PATH=lighthouse # Default path, change if Lighthouse is installed elsewhere
      # - USE_CLICKHOUSE=false
      # - CLICKHOUSE_HOST=clickhouse
      # - CLICKHOUSE_PORT=9000
      # - CLICKHOUSE_USER=default
      # - CLICKHOUSE_PASSWORD=
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Monitoring dashboard
  monitor:
    build:
      context: ../.. # Build from project root
      dockerfile: Link_Profiler/deployment/docker/Dockerfile.monitor
    ports:
      - "8001:8001"
    environment:
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
    restart: unless-stopped

  # Satellite crawler instances
  satellite-1:
    build:
      context: ../.. # Build from project root
      dockerfile: Link_Profiler/deployment/docker/Dockerfile.satellite
    environment:
      - REDIS_URL=redis://redis:6379
      - CRAWLER_ID=satellite-us-east-1
      - REGION=us-east-1
      # Pass through API keys needed by CrawlService within satellites
      # - ABSTRACT_API_KEY=your_abstract_api_key_here
      # - USE_ABSTRACT_API=false
      # - USE_OPENLINKPROFILER_API=false
      # - USE_GSC_API=false
      # - REAL_BACKLINK_API_KEY=your_real_backlink_api_key
      # - USE_REAL_BACKLINK_API=false
      # - REAL_SERP_API_KEY=your_real_serp_api_key
      # - USE_REAL_SERP_API=false
      # - USE_PLAYWRIGHT_SERP_CRAWLER=false
      # - PLAYWRIGHT_HEADLESS=true
      # - PLAYWRIGHT_BROWSER_TYPE=chromium
      # - REAL_KEYWORD_API_KEY=your_real_keyword_api_key
      # - USE_REAL_KEYWORD_API=false
      # - USE_KEYWORD_SCRAPER=false
      # - LIGHTHOUSE_PATH=lighthouse
      # - USE_CLICKHOUSE=false
      # - CLICKHOUSE_HOST=clickhouse
      # - CLICKHOUSE_PORT=9000
      # - CLICKHOUSE_USER=default
      # - CLICKHOUSE_PASSWORD=
    depends_on:
      - redis
    restart: unless-stopped

  satellite-2:
    build:
      context: ../..
      dockerfile: Link_Profiler/deployment/docker/Dockerfile.satellite
    environment:
      - REDIS_URL=redis://redis:6379
      - CRAWLER_ID=satellite-us-west-1
      - REGION=us-west-1
    depends_on:
      - redis
    restart: unless-stopped

  satellite-3:
    build:
      context: ../..
      dockerfile: Link_Profiler/deployment/docker/Dockerfile.satellite
    environment:
      - REDIS_URL=redis://redis:6379
      - CRAWLER_ID=satellite-eu-west-1
      - REGION=eu-west-1
    depends_on:
      - redis
    restart: unless-stopped

volumes:
  redis_data:
  postgres_data:
